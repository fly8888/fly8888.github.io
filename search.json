[{"title":"iOS 简书app去广告","url":"/2021/03/10/iOS-简书app去广告/","content":"\n#### 简书App不错，但是广告太烦人，动手把广告屏蔽掉\n\n# 分析 简书 6.2.0\n    由于广告是开屏弹出的，所以大致猜测在 application:didFinishLaunchingWithOptions: 中加载，找到代理类 HGAppDelegate ，发现其重写了 [HGAppDelegate load]，\n替换了两个oc方法，所以需要分析 swizzled_application:didFinishLaunchingWithOptions: 中执行过程。\n    ```\n    objc_msgSend(HGAppDelegate,\"exchangeSelector:withSwizzledSelector:\",\"application:didFinishLaunchingWithOptions:\"，\"swizzled_application:didFinishLaunchingWithOptions:\");\n    objc_msgSend(HGAppDelegate,\"exchangeSelector:withSwizzledSelector:\",\"applicationWillResignActive:\",\"swizzled_applicationWillResignActive:\");\n    ```\n发现执行了 [HGAppConfiguration setupPreloadItems] 方法 ，在内部看到 [Hugo.ThirdPartyADManager fetchFlowAD] 方法 ，通过搜索 fetchFlowAD 发现多个 ADProvider。通过frida 查看调用的API,hook 掉即可。。。。\n```objectivec\n\n%hook _TtC4Hugo19ThirdPartyADManager\n-(void)fetchFlowAD\n{\n    \n}\n-(void)showBannerAdViewFrom:(id)a1 margin:(double)a2 superView:(id)a3 closeHandler:(id)a4\n{\n}\n\n-(BOOL)isShowMyBannerAD\n{\n    return NO;\n}\n%end\n\n%hook _TtC4Hugo17ToutiaoADProvider\n-(void)showBannerAdViewFrom:(id)a1 margin:(double)a2 superView:(id)a3 resultHandler:(id)a4 closeHandler:(id)a5\n{\n    \n}\n%end\n\n%hook _TtC4Hugo13GDTADProvider\n-(void)showBannerAdViewFrom:(id)a1 margin:(double)a2 superView:(id)a3 resultHandler:(id)a4 closeHandler:(id)a5\n{\n    \n}\n%end\n\n%hook HGMyPageTableViewController\n-(void)showBannerAdView\n{\n\n}\n-(void)fetchBannerAD\n{\n\n}\n-(BOOL)isClosedOfBannerAdView\n{\n    return YES;\n}\n\n%end\n\n%hook GDTUnifiedBannerView\n-(void)loadAdAndShow\n{\n}\n%end\n```\n\n其中 有意思的是 “Hugo.MifuADProvider” 这类类名 可以通过 “_TtC4Hugo19ThirdPartyADManager” hook，并且在越狱设备上直接动态注入插件不起作用，但是通过注入后重签名，安装在未越狱设备上时是有效的。\n\n    \n","tags":["iOS"],"categories":["iOS"]},{"title":"OC Hook 相关记录","url":"/2020/11/26/OC-Hook-相关记录/","content":"\n# 获取OC 实现部分 IMP\n\n* 通过method 去获取，这里只获取了实例方法的IMP\n```objectivec\n#import <objc/runtime.h>\nstruct objc_method2{\n    SEL method_name      ; // 方法名\n    char *method_types   ;\n    IMP method_imp       ; // 方法实现\n};\ntypedef struct objc_method2 *Method2;\n    \nMethod2 method = (Method2)class_getInstanceMethod(%c(SmCoreCollector),@selector(collect));\nNSLog(@\"--Method2--:%@---%s---%lu\",NSStringFromSelector(method->method_name),method->method_types,method->method_imp);\n\n\n```\n* 通过 class_getMethodImplementation 获取\n\n```objectivec\n#import <objc/runtime.h>\nClass _class, SEL message;\nIMP imp = class_getMethodImplementation(_class, message);\n```\n\n## 可以在此处替换IMP来过检测，但是是否会引发其它问题暂时不确定."},{"title":"Unity iOS 破解","url":"/2020/08/17/Unity-iOS-破解/","content":"\n# 1.工具\n\n[Il2CppDumper](https://github.com/Perfare/Il2CppDumper)，Unity3D游戏分析利器，Unity转换成IL2CPP的符号表提取工具，目前只支持Windows平台，最终生成的符号表脚本导入IDA用。\n\n\n# 2.技巧记录\n\n    1.确认游戏Unity版本，在IDA里搜索字符串X-Unity-Version，调用的地方会出现版本号，我们要找的版本号 5.6.4p1 。\n\n# 3.文章记录\n\n[https://bbs.pediy.com/thread-259951-1.htm](https://bbs.pediy.com/thread-259951-1.htm)\n\n    "},{"title":"MacOS 下 破解 Transmit.app","url":"/2020/02/19/MacOS-下-破解-Transmit-app/","content":"\n\n#####  这是我第一次破解macos 应用，遇到了诸多问题\n\n### 按照破解iOS 应用的套路,首先尝试cycript 注入 Transmit，进行动态调试\n\n![cy注入失败](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/MacOS-下-破解-Transmit-app/2020_02_19_3_29_46.png)\n报错了\n\n签入权限 get-task-allow\n\n```plaintext\n<key>get-task-allow</key>\n<true/>\n```\n重签后，仍旧无法注入，不知道为何，据说是mac SIP在影响。 但是我不想关闭SIP，只能另想办法。\n\n\n### 开启Charles 代理抓包 ，发现数据明文传输，并未加密，真是太优秀了\n\n\n```plaintext\nURL:  https://circle.panic.com/api/v1/app_store/subscription_status/\n\n返回数据:\n\n\"status\": \"ok\", //试用状态\n\"signed_original_transaction_id\": \"TsK6nJskEYN97u8X+SrxLnsSy8AlU/wkUs6lQqL3++jh+DnygByojolNm5xBbGKFfeC4qYinWv8TtQQWa50aJoej4p1kpsUz6QN4NdInFOaPr3TlKP5wJi30vgJWU9H6WkVf71IjZ8dBRPQDAcxjH3D6VBVSEm7g4YiGLpbBpyI96lUk62BWvR7FlRPJ20wPDcm8gDLf3VenjQ7Vs9WH/lIWlYYIxdRrygga5sMcpcmYf0JILQGssIzJjgwbuPfjYCsb77xRqUyPtu7anINkWGb3QUwcc5SoSxa8YbAewKjhiAO0rUSvb/06XtXg6lsZ1zXPzp8j1wj2klTofw4AueUk2UA2IHbjMonzz/NeM3/TTLBPjk5KsD1XeJdoT4/4xBEpa3maqn+f8BHVKLbHQh/jHG+AYjqRS57uGSC57WeV6IG1EA9os4LRoUt9K4PUDh4DZPtuKxG/ T1JjWyfWSnwRjTn047k8ZHL4HSAlbD8SUllOZ7quk+CD3+lxsKEU\", //AppStore 生成的ID\n\"expiry_date\": \"2030-02-25T13:07:29+00:00\",  //到期日期\n\"can_start_trial\": true    //能否试用\n\n```\n**注意这里要开启试用，才能抓到这段数据，因为只有在开启订阅试用的时候，才会验证是否试用到期**\n\n这里我们看到了数据，只需要把传输数据修改一下即可。那么如何修改呢?\n\n\n#### 在 Charles 中手动修改传回的数据，后期修改 host 屏蔽 新数据。\n在 https://circle.panic.com/api/v1/app_store/subscription_status/ 下，下断点，修改返回的试用结束时间\n\n```plaintext\n修改返回数据:\n\n\"status\": \"ok\", //试用状态\n\"signed_original_transaction_id\": \"TsK6nJskEYN97u8X+SrxLnsSy8AlU/wkUs6lQqL3++jh+DnygByojolNm5xBbGKFfeC4qYinWv8TtQQWa50aJoej4p1kpsUz6QN4NdInFOaPr3TlKP5wJi30vgJWU9H6WkVf71IjZ8dBRPQDAcxjH3D6VBVSEm7g4YiGLpbBpyI96lUk62BWvR7FlRPJ20wPDcm8gDLf3VenjQ7Vs9WH/lIWlYYIxdRrygga5sMcpcmYf0JILQGssIzJjgwbuPfjYCsb77xRqUyPtu7anINkWGb3QUwcc5SoSxa8YbAewKjhiAO0rUSvb/06XtXg6lsZ1zXPzp8j1wj2klTofw4AueUk2UA2IHbjMonzz/NeM3/TTLBPjk5KsD1XeJdoT4/4xBEpa3maqn+f8BHVKLbHQh/jHG+AYjqRS57uGSC57WeV6IG1EA9os4LRoUt9K4PUDh4DZPtuKxG/ T1JjWyfWSnwRjTn047k8ZHL4HSAlbD8SUllOZ7quk+CD3+lxsKEU\", //AppStore 生成的ID\n\"expiry_date\": \"2090-02-25T13:07:29+00:00\",  //到期日期\n\"can_start_trial\": true    //能否试用\n\n```\n退出App，修改 sudo vi /etc/hosts \n添加\n\n```plaintext\n0.0.0.0 circle.panic.com #Transmit App authorization\n0.0.0.0 panic.com #Transmit App authorization\n```\n这个方法是最为简单的，但是，由于本人经常要用的代理工具，在开启全局代理之后 数据就不走host，导致屏蔽失败。这个很蛋疼。\n\n#### Hook App 解密过程 , 串改数据\n\n把APP 可执行文件拖进 Hopper Disassembler 分析，搜索URL字符串，字符串没加密，找到字符串地址\n\n![字符串](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/MacOS-下-破解-Transmit-app/2020_02_19_4_06_48.png)\n\n找到引用位置\n\n![发起调用](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/MacOS-下-破解-Transmit-app/2020_02_19_4.11.25.png)\n\n![解析返回数据](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/MacOS-下-破解-Transmit-app/2020_02_19_4_12_15.png)\n\n发现通过解析\n```objectivec\nrax = [NSJSONSerialization JSONObjectWithData:r12 options:0x0 error:0x0];\n```\n正常情况下，只需hook住该方法，修改一下值即可。\n\n[参照 如何注入mac os app](https://www.jianshu.com/p/6821d8d06c65)\n\n```objectivec\n@interface NSJSONSerialization (HOOK)\n@end\n@implementation NSJSONSerialization (HOOK)\n+(id)HOOK_JSONObjectWithData:(id)data options:(int)option error:(NSError **)error\n{      \n    id ret = [self HOOK_JSONObjectWithData:fakeData options:option error:error];\n    if(ret[@\"status\"]&&ret[@\"expiry_date\"]&&ret[@\"can_start_trial\"])\n    {\n        NSString * signed_original_transaction_id = @\"你的key\";\n        NSMutableDictionary * mret = [[NSMutableDictionary alloc]init];\n        [mret setValue:@\"ok\" forKey:@\"status\"];\n        [mret setValue:signed_original_transaction_id forKey:@\"signed_original_transaction_id\"];\n        [mret setValue:@\"2099-12-31T09:58:59+00:00\" forKey:@\"expiry_date\"];\n        [mret setValue:@\"true\" forKey:@\"can_start_trial\"];\n        return mret;\n    }\n}\n@end\n\nstatic void __attribute__((constructor)) initialize(void) {\n    NSLog(@\"++++++++ loaded ++++++++\");\n    [NSJSONSerialization jr_swizzleClassMethod:@selector(JSONObjectWithData:options:error:) withClassMethod:@selector(HOOK_JSONObjectWithData:options:error:) error:nil];\n}\n```\n编写插件，生成的libTransmitHook.dylib插件\n命令行执行\n\n```bash\ncp libTransmitHook.dylib /Applications/Transmit.app/Contents/Frameworks/\ncd /Applications/Transmit.app/Contents/Frameworks/\nexport DYLD_INSERT_LIBRARIES=./libTransmitHook.dylib && /Applications/Transmit.app/Contents/MacOS/Transmit`\n```\n\nApp启动，但是hook报错，或许是加了某种 hook检测。 此路不通。\n\n#### 直接静态修改 URL字符串,指向一个空域名\n我们在手动串改过一次数据后，只要把后续数据请求给屏蔽，即可。在代理中篡改完之后，假的数据已被保存，阻断后续数据。\n\n静态修改 https://circle.panic.com/api/v1/app_store/subscription_status/ 为 https://aaaaaa.panic.com/api/v1/app_store/subscription_status/\n\n找到字符串\n\n![字符串](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/MacOS-下-破解-Transmit-app/2020_02_19_4_33_17.png)\n\n点 windown->show hexadecimal Editor.\n\n![编辑](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/MacOS-下-破解-Transmit-app/2020_02_19_4_34.29.png)\n\n双击 右侧 字符 直接修改\n\n修改完毕后，点 File->Produce New Executable 保存. \n\n**如果app原本有签名信息，这里会提示删除签名信息。但是这个删除有bug，就是无法重签。**\n\n这里用[macho_edit](https://github.com/Tyilo/macho_edit.git)工具，先删除签名。\n\n删除签名信息![](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/MacOS-下-破解-Transmit-app/2020_02_19_5_47_02.png)\n\n再用Hopper Disassembler静态修改，再保存即可。\n\n把 新生成的 可执行文件，替换到 /Applications/Transmit.app/Contents/MacOS/Transmit 保存。\n\n点击启动会 提示内部错误。\n应该由于没有重签，导致某些权限不可用。\n\n发现貌似有签名校验，patch签名检测\n```objectivec \nBOOL VerifySignedString(__int64 a1, RSA **a2, __int64 a3)\n```\n![VerifySignedString](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/MacOS-下-破解-Transmit-app/2020_02_19_5_38_53.png)\n\n找到函数中 rax 寄存器 最后赋值 位置，选中这一行\n点 Modify->Assemble instruction \n输出 \n`movzx eax, 0x01`\n点击 next，即可\n\n\n\n这里我们重新签下名\n\n```objectivec\nsecurity find-identity -v -p codesigning //查看可用证书\nldid -e /Applications/Transmit.app/Contents/MacOS/Transmit > ~/Desktop/ent.plist //导出权限信息\ncd ~/Desktop\ncodesign -fs \"证书信息\" --no-strict --entitlements=ent.plist /Applications/Transmit.app //重新签名\n```\n如果签名异常可以尝试\n```\ncodesign --force --deep --sign - /Applications/Transmit.app\ncodesign -fds - /Applications/Transmit.app\n```\n\n重新启动，正常运行，抓包看，回传数据接口已被修改。查看订阅时间为我们串改的值。\n\n\n启动后再关闭总是提示AppStore 评分弹框。分析patch掉\n\n因为此弹窗为系统公开API，我们定位到\n\n\n```objectivec\n[SKStoreReviewController requestReview];\n-[TRDocument requestReview]:\n```\n\n![汇编代码](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/MacOS-下-破解-Transmit-app/2020_02_19_9.05.55.png)\n\n`00000001000b3478         jne        loc_1000b349b`\n\nje为相等转移，jne是不相等转\n\n修改 jne 为 je\n\n0x75 对应 汇编指令jne, 0x74 对应汇编指令 je\n\n选中 jne 指令， 点 windown->show hexadecimal Editor 修改 75 为 74 生成新的可执行文件。 \n\n重新签名即可，成功屏蔽弹框。\n\n\n\n到这里因该是破解完成。中间太曲折了。\n\n#### 由于  在 mac os 10.15 上 权限影响，导致无法运行\n这里从新分析了这个软件，修改 “chid” 属性的返回值为9999即为授权成功。\n不过签名很麻烦,在签上权限后会提示 文件损坏。可以用下面命令重签，不过没有权限。但是也能用、\n```\ncodesign --force --deep --sign - /Applications/Transmit.app\n```\n\n(PS)当然有更好的方式，但是暂时因为无法实现动态调试，就不再折腾了。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["MacOS","破解"],"categories":["MacOS"]},{"title":"centos7 配置端口转发","url":"/2020/02/15/centos7 配置端口转发/","content":"\n#### 注意此处以 centos7 配置为例，防火墙为 firewall 。\n\n# 开始配置\n\n```bash\n    #查看防护墙是否开启,我这里直接重启\n    systemctl restart firewalld\n    #防火墙添加开放原始端口\n    firewall-cmd --add-port=原始端口/tcp --permanent\n    #添加转发规则\n    firewall-cmd --add-forward-port=port=原始端口:proto=tcp:toaddr=新的IP:toport=新的端口 --permanent\n    #查看端口列表，确定是否开启端口\n    firewall-cmd --list-all\n    #重新加载防火墙\n    firewall-cmd --reload\n    \n    #内核参数文件sysctl.conf配置ip转发功能\n    vi /etc/sysctl.conf\n    #在文本内容中添加：net.ipv4.ip_forward = 1\n    net.ipv4.ip_forward = 1\n    #使立即生效\n    sysctl -p\n    \n    完成了！\n```\n\n**非常简单的就完成了**\n\n# 下面是 firewalld服务 常用命令\n\n### firewalld服务配置\n\n```plaintext\n    启动服务：systemctl start firewalld\n    \n    关闭服务：systemctl stop firewalld\n    \n    重启服务：systemctl restart firewalld\n    \n    查看服务状态：systemctl status firewalld\n    \n    开机自启服务：systemctl enable firewalld\n    \n    开机禁用服务：systemctl disable firewalld\n    \n    查看是否开机自启：systemctl is-enable firewalld\n    \n    PS：systemctl常见其他命令：\n    \n    查看已启动的服务列表：systemctl list-unit-files | grep enabled\n    \n    查看启动失败的服务列表：systemctl --failed\n```\n\n### firewalld规则配置\n\n```plaintext\n    查看版本：firewall-cmd --version\n    查看帮助：firewall-cmd --help\n    查看状态：firewall-cmd --state\n    查看所有打开的端口：firewalld-cmd --zone=public --list-ports\n    查看所有规则：firewall-cmd --list-all\n    重载规则：firewall-cmd --reload\n    查看区域信息：firewall-cmd --get-active-zones\n    查看指定接口所属区域： firewall-cmd --get-zone-of-interface=enp4s0\n    拒绝所有包：firewall-cmd --panic-on\n    取消拒绝所有包： firewall-cmd --panic-off\n    查看是否拒绝： firewall-cmd --query-panic\n ```\n\n### firewalld端口规则\n\n```plaintext\n    添加端口：firewall-cmd --add-port=80/tcp --permanent\n    移除端口：firewall-cmd --remove-port=80/tcp --permanent\n    查看端口状态：firewall-cmd --zone=public --query-port=80/tcp\n    （PS：添加或删除端口后不会立即生效，配置完 --reload后才能生效；--permanent代表永久生效）\n```\n### firewalld端口转发\n    \n\n```plaintext\n    开启防火墙伪装：firewall-cmd --add-masquerade --permanent    //开启后才能转发端口\n    \n    添加转发规则：firewall-cmd --add-forward-port=port=80:proto=tcp:toport=8080:toaddr=192.168.1.1 --permanent\n    （PS：此规则将本机80端口转发到192.168.1.1的8080端口上，配置完--reload才生效）\n    \n    如果配置完以上规则后仍不生效，检查防火墙是否开启80端口，如果80端口已开启，仍无法转发，可能是由于内核参数文件sysctl.conf未配置ip转发功能，具体配置如下：\n    \n    vi /etc/sysctl.conf\n    \n    在文本内容中添加：net.ipv4.ip_forward = 1\n    保存文件后，输入命令sysctl -p生效\n```\n\n    \n","tags":["linux端口转发"]},{"title":"关于练手文章的记录","url":"/2020/02/13/关于练手文章的记录/","content":"\n---\n\n# 练手过程\n\n### 主体内容的创建\n\n* 本人使用的是MacOS，直接用safari浏览器，右键，“审查属性” 抓取html内容。\n\n* html在线转Markdown,多番测试之后，使用了 [https://www.baidufe.com/fehelper/html2markdown/index.html](https://www.baidufe.com/fehelper/html2markdown/index.html) 这个网站的转换。虽说不是很完美，但已经省了很大功夫。文本内容，基本都是ok的，但是图片链接有问题，盗链会不稳定。\n\n* 解决图床问题，最终使用[https://www.jsdelivr.com/?docs=gh](https://www.jsdelivr.com/?docs=gh) 给的方案，把图片上传到GitHub，直接访问 https://cdn.jsdelivr.net/gh/GitHub用户名/路径/图片 ，即可显示图片，稳定方便，太棒了 。由于是第一次写这个，我是手动拖动保存他人blog的图片（应该通过脚本去下载图片最为方便），发现保存后的图片跟原本blog里图片同名，又省很大劲。替换图片链接后，稍作修改，就完工了。\n\n![imge](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/blog0/image1.png)\n\n","tags":["MacOS","iOS"],"categories":["MacOS","iOS"]},{"title":"Mac 系统下搭建hexo个人博客","url":"/2020/02/13/Mac 系统下搭建hexo个人博客/","content":"#### 此文章为练手文章，出处来自 https://www.jianshu.com/p/77db3862595c\n---\n\n\n# 1.前言\n\n不久前买了17款的MacBook Pro，全新的电脑，我想在这个上面管理我的个人博客，所以我要继续搭建这样一个环境，说起来我也应该是老手了，我在2月份的时候已经在我的Linux上面搭建了环境，可以的是，我的Linux被我系统重装了，磁盘全部清空，我没有办法继续来更新我的博客。这件事我已经想了好久，因为第一次的搭建，让我有些阴影，花了我好多的时间，太可怕。这次回家，我打算攻克这个问题，并且记录下来，所以有了这篇笔记。首先，需要的是把环境搭建好，这个是比较简单的，关键的是后期的博客修饰，要将其看起来很舒服，美观大气，简洁明了。那么开始吧......\n\n# 2. hexo博客系统搭建\n\n如果不知道hexo是个什么东西，那就去百度一下吧，我也没法说清楚，我们可以使用它就可以了。可以去看官方的[文档](https://hexo.io/zh-cn/docs/)，说得很详细，简单的说就是一个博客框架。\n\n### 2.1 Github账号注册及仓库创建\n\n太多概念需要普及一下，如果是完全零基础的小伙伴，我这里也没办法，我也讲不了多少，我这里就只讲实战了，而不普及理论知识了，用到的时候去Google一下吧，基本没有什么问题。\n\n* 进入[GitHub](https://github.com/)官网，注册账号\n![账号注册页面，都是一般的流程，看着填写就可以](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/blog1/3478485-81de99996c35fa6b.png)\n![注册之后的样子](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/blog1/3478485-cad828d97fb4f8a5.png)\n![点击new仓库](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/blog1/3478485-918befac816ff5d6.png)\n* 创建仓库的名字必须为username.github.io，我的用户名为Lxmic，因此我创建的仓库就是Lxmic.github.io，这是很关键的一点，很重要。输入名字后，直接点最下面绿色的按钮，创建新仓库。这一部分基本完成了，接下去需要在终端操作。\n![输入仓库的名字](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/blog1/3478485-d451ae9bb81c6d0e.png)\n\n### 2.2 环境配置\n\n参考官网[文档](https://hexo.io/zh-cn/docs/)：\n\n*  安装Git、Node.js和hexo\n\n```bash\n# 首先检查时候安装了git和node.js，终端输入一下命令，\nnode -v #是否出现安装版本信息，出现说明已经安装了\ngit --version #同上述情况\n# 如果没有安装，则进行安装,都可以通过直接下载安装测序进行安装，这里不演示，提供下载网址：\n[git]: https://sourceforge.net/projects/git-osx-installer/\n[node.js]: https://nodejs.org/en/\n```\n\n*   如果已经安装好了上述的软件，那么可以安装hexo，然后等待安装成功即可。\n    \n    `npm install -g hexo-cli`\n\n*   创建blog文件夹，并初始化建立博客框架\n    \n```bash\n    # 在你的家目录下创建一个blog文件夹\n    mkdir blog\n    # 进入目录\n    cd blog\n    # 初始化目录\n    hexo init\n    开启本地服务 \n    # hexo s\n```\n\n\n    出现以下信息，说明你可以本地访问博客系统，在浏览器输入4000这个网址，就可以看到博客首页。\n\n![image.png](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/blog1/3478485-05ee93d0cccbdbe0.png)\n\n![到这里说明你的环境以及没有问题了，成功了搭建起了博客框架](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/blog1/3478485-7c18ba82bb6dd688.png)\n\n\n\n### 2.3 博客关联到Github仓库\n\n在第一步的时候，我们已经将仓库创建好了，这里就需要用到了。\n\n* 首先我们要编辑图中_config.yml文件，这是博客的主要配置文件，在下面一部分，我们要频繁使用这个配置文件，这里先编辑一步，为了管理GitHub账号。\n    \n\n![image.png](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/blog1/3478485-a9853e573b2f3168.png)\n\n\n\n*   打开文件之后，在文档最后，输入红色大框中的内容，只需要将你的username替换就可以了，其他无需更改。\n    \n\n![image.png](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/blog1/3478485-ad943de52c423555.png)\n\n\n*   然后在目录中执行\n    \n\n      \n```bash\n    # 产生静态网页\n    hexo g\n    # 部署到GitHub page上\n    hexo d\n```\n\n然后你需要输入你GitHub的用户名和密码，这样你就就可以使用你的仓库名去访问你的博客主页了。为了每一次部署不必一种输入密码，我们可以生成秘钥，然后提交到GitHub，进行关联，那么你下次就不需要再输入密码了。\n\n    \n\n![关联成功，这里我是购买了自己的域名，所以显示的是域名，域名关联在后面讲，这里先忽略\n](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/blog1/3478485-a1753ffbbf1d4f96.png)\n\n*   关联GitHub账号，免密提交\n    \n\n```bash\n    # 用你注册GitHub时的邮箱号，进行秘钥生成\n    cd ~\n    ssh-keygen -t rsa -C \"xxxxxxx@qq.com\"\n    # 系统就会生成一个隐藏文件夹.ssh\n    cd .ssh\n    ls\n    # 复制公钥\n    vim id_rsa.pub\n```\n\n点击箭头的按钮，进入设置，然后点击SSH and GPG keys，创建新的SSH，将之前复制的公钥黏贴，提交，OK。\n\n    \n\n![进入settings](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/blog1/3478485-9a6fe8e8a47d59dc.png)\n\n\n![](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/blog1/3478485-92b2d4a66901907b.png)\n\n![image.png](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/blog1/3478485-f4a1759f76abfc57.png)\n\n\n\n![image.png](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/blog1/3478485-94a0d1a2f04727f6.png)\n\n\n### 2.4 博客基本使用\n\n*   创建新的文章\n    \n    `hexo new\"djy\"`\n\n![执行之后，就会在下面的目录里自动创建djy.md的markdown文件，然后你就可以输入内容](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/blog1/3478485-a3a06109307ab5b3.png)\n\n\n*   编辑markdown文件，可以使用markdown神器[typora](https://typora.io/)。可以看到markdown文件，里面自动生成了题目和时间，还可以写标签，这些我们先不去修改，这些是yaml内容，一般不去修改，修改不好会报错。我们直接在下面编辑一些内容。\n    \n\n![](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/blog1/3478485-e862816192df3dbf.png)\n\n*   发布文章至博客\n    \n```bash\n        hexo g\n        hexo d\n```\n\n如果运行加过是这样的结果，那么你的博客发布成功了，以后每次只要这么进行就可以更新你的博客了。\n\n    \n\n![image.png](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/blog1/3478485-c4837e910f043459.png)\n![我写的内容，可以在博客上发布了，成功](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/blog1/3478485-3cb21a03777bc825.png)\n\n\n# 3. Hexo博客美化及功能增添\n\n### 3.1 选主题\n\n*   Hexo官网：[https://hexo.io/themes/](https://hexo.io/themes/)，里面有特别多的主题可以选择，我在这里选的是next这个主题。下载主题：\n    \n\n   \n```bash\n    cd ~/blog\n    git clone https://github.com/iissnan/hexo-theme-next themes/next\n```\n\n\n*   修改站点配置文件：`_config.yml`，将里面`76行`的theme由landscape修改为next\n    \n\n![image.png](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/blog1/3478485-3088138bb70404d7.png)\n\n*   更换新的主题，可能会有一些延迟\n    \n\n![image.png](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/blog1/3478485-039a85947f69656b.png)\n\n\n\n### 3.2 通过站点配置文件修改网站细节\n\n需要修改的内容可以参考网站：[https://hexo.io/zh-cn/docs/configuration](https://hexo.io/zh-cn/docs/configuration) ，里面对各个参数有一些详细的解释，我这里修改一些博客的标题，副标题，描述，语言等。\n\n**这里我想说的是，一般你修改一项，重新部署网站一下，因为一旦出错，就比较容易找到原因。**\n\n    \n\n![网站配置说明](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/blog1/3478485-52d30a963674a708.png)\n![只修改这些](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/blog1/3478485-9a05ff4d6d8603ff.png)\n![修改后的博客，字体变成了中文，有了标题和副标题](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/blog1/3478485-e5d38223a960e5d3.png)\n\n\n### 3.3 主题文件修改博客内容\n\n*   关键也是同样名字的配置文件：`_config.yml`，看一下里面的内容。\n    \n\n![image.png](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/blog1/3478485-2f827fc6a36506cc.png)\n\n![开始是一些描述性的内容](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/blog1/3478485-dbc42287b1f9d490.png)\n\n*   修改整个主题，不需要的用#注释掉，这里我已经将默认的Muse注释掉，改为mist\n    \n![image.png](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/blog1/3478485-14af26f685431eff.png)\n\n*   将menu也修改，没来只有首页和归档，限制添加标签和分类，只需要去掉前面的#，现在来看一下效果。\n    \n\n![image.png](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/blog1/3478485-73f54bfdf14f4a9e.png)\n\n\n\n![效果](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/blog1/3478485-e2bc9266af442e86.png)\n\n\n\n*   需要新建一个分类和标签页面\n    \n\n![找不到页面](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/blog1/3478485-128cb22b5fbe2888.png)\n\n\n    ```bash\n        cd ~/blog\n        hexo new page categories\n        hexo new page tags\n    ```\n\n![添加分类类型](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/blog1/3478485-ee0bf9ca96a73be1.png)\n\n![添加标签类型](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/blog1/3478485-a67e3c3e0b7d1bf2.png)\n\n效果如下：\n\n![出现标签页面](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/blog1/3478485-ab1201acc94ac173.png)\n\n\n\n*   设置头像\n    \n![头像设置，参考next官网](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/blog1/3478485-92da53d5e99eef50.png)\n\n![设置完之后的头像](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/blog1/3478485-9bbc70592c01a5f2.png)\n\n*   设置侧边栏的社交连接\n    \n\n![next官网](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/blog1/3478485-e0256e0a9e7f30a6.png)\n\n![设置后的效果](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/blog1/3478485-301394f036009123.png)\n\n\n*   设置disqus评论功能，你只需要将站点配置文件`disqus_shortname`中设置你`shortname`，并在主题配置文件中开启disqus功能为true。\n    \n![image.png](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/blog1/3478485-ef5470ccbab918ab.png)\n![开启评论后的效果](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/blog1/3478485-d025c5141f9f96d3.png)\n\n\n\n*   设置本地搜索功能，只需要主题配置文件将`local search` 改成`true`，并且需要修改站点配置文件，在extensions下面，添加内容如下：\n    \n\n    ```bash\n        search:\n        path: search.xml\n        field: post\n        format: html\n        limit: 10000\n    ```\n    \n\n![image.png](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/blog1/3478485-40ceed2500461a85.png)\n\n![搜索的效果](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/blog1/3478485-06c25d7e130cd569.png)\n\n\n\n*   设置阅读全文按钮，有时候文章有很多，你没有办法都是全文显示，会显得特别混乱，因此我们只要显示一部分内容。将主题配置文件中`auto_excerpt`开启，然后更新，就完全OK了。\n\n![](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/blog1/3478485-3d5c73f743f64f8b.png)\n\n![image.png](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/blog1/3478485-2495b44e49466190.png)\n\n*   设置打赏功能，不管有没有人，设置一下这个功能还是挺好的。\n\n![image.png](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/blog1/3478485-d5dc5582ff81079a.png)\n\n![打赏功能已经开启](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/blog1/3478485-b74f129ea9e06dfb.png)\n\n\n\n*   修改文章内链接文本样式，你如果不想要下划线，那么可以把里面的border-bottom这4行代码都修改为`none`。\n\n![image.png](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/blog1/3478485-04f6bc9c7d793f4a.png)\n\n> 参考文章：[https://www.jianshu.com/p/3a05351a37dc](https://www.jianshu.com/p/3a05351a37dc)\n\n![image.png](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/blog1/3478485-d005b7f46df73ecd.png)\n\n*   设置网站缩略图标，将small、medium、apple_touch_icon这三行，都设置成一样的图片地址\n> 参考文章：[https://www.jianshu.com/p/3a05351a37dc](https://www.jianshu.com/p/3a05351a37dc)\n\n![image.png](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/blog1/3478485-3810a90a63f2740a.png)\n\n![这就是我选择的图标](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/blog1/3478485-f1d5619a1261e8a3.png)\n\n*   添加网站访问量\n> 参考文章：[https://www.jianshu.com/p/3a05351a37dc](https://www.jianshu.com/p/3a05351a37dc)\n\n![完全是别人的东西，直接跟着尝试](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/blog1/3478485-179683b97303a2c2.png)\n\n效果如下：\n\n![image.png](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/blog1/3478485-72ce02ae40117fd1.png)\n\n*   添加版权信息\n> 参考文章：[http://stevenshi.me/2017/05/26/hexo-add-copyright/](http://stevenshi.me/2017/05/26/hexo-add-copyright/)\n\n![版权](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/blog1/3478485-6f6f4124ea3af77b.png)\n\n\n*   新创建的文章自动添加分类\n\n在blog主目录下，编辑`post.md`，添加`categories：`就可以在创建的博客中生成。\n\n![image.png](https://cdn.jsdelivr.net/gh/fly8888/BlogPic/blog1/3478485-489eac36689cc02d.png)\n\n# 4. 结语\n\n花了一天半的时间，终于完成了博客的搭建，完全恢复到了之前的状态，这样就行了。网上有太多资料了，看都看不过来，很不错，下面列出我参考过的。终于把这件事给做完了，从二月份拖到了现在，真是拖延到无穷无尽。最后附上我博客的地址，会不定期更新。\n\n\n\n[此文章为练手文章，出处来自 https://www.jianshu.com/p/77db3862595c](https://www.jianshu.com/p/77db3862595c)","tags":["MacOS","iOS"],"categories":["MacOS","iOS"]}]